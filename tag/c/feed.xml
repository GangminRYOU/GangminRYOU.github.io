<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://gangminryou.github.io/tag/c/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://gangminryou.github.io/" rel="alternate" type="text/html" />
  <updated>2023-02-26T17:54:39+09:00</updated>
  <id>https://gangminryou.github.io/tag/c/feed.xml</id>

  
  
  

  
    <title type="html">DevYOU | </title>
  

  
    <subtitle>비전공 개발초보의 성장과정</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">고수준 입출력과 저수준 입출력의 차이</title>
      <link href="https://gangminryou.github.io/lowlevel_and_highlevel_io" rel="alternate" type="text/html" title="고수준 입출력과 저수준 입출력의 차이" />
      <published>2023-02-12T01:40:00+09:00</published>
      <updated>2023-02-12T01:40:00+09:00</updated>
      <id>https://gangminryou.github.io/lowlevel_and_highlevel_io</id>
      <content type="html" xml:base="https://gangminryou.github.io/lowlevel_and_highlevel_io">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;C언어 파일입출력 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./lowlevel_io_open&quot;&gt;저수준 입출력 함수 - open()&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./lowlevel_and_highlevel_io&quot;&gt;고수준 입출력과 저수준 입출력의 차이&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 글은 고수준 입출력과 저수준 입출력의 차이에 관한 글 입니다.&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>GangminRYOU</name>
        
        
      </author>

      

      
        <category term="c" />
      

      
        <summary type="html">C언어 파일입출력 저수준 입출력 함수 - open() 고수준 입출력과 저수준 입출력의 차이</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">저수준 파일 입출력함수 - open()</title>
      <link href="https://gangminryou.github.io/lowlevel_io_open" rel="alternate" type="text/html" title="저수준 파일 입출력함수 - open()" />
      <published>2023-02-12T01:40:00+09:00</published>
      <updated>2023-02-12T01:40:00+09:00</updated>
      <id>https://gangminryou.github.io/lowlevel_io_open</id>
      <content type="html" xml:base="https://gangminryou.github.io/lowlevel_io_open">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;C언어 파일입출력 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./lowlevel_io_open&quot;&gt;저수준 입출력 함수 - open()&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./lowlevel_and_highlevel_io&quot;&gt;고수준 입출력과 저수준 입출력의 차이&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;글을-쓰는-이유&quot;&gt;&lt;strong&gt;글을 쓰는 이유&lt;/strong&gt;&lt;/h1&gt;

&lt;p&gt;42서울 라피신을 진행하는 동안, 정말 많이 사용했던 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()함수&lt;/code&gt;, 그리고 이외에 파일 입출력을 위해 사용되는 저수준 입출력 함수인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open()함수&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read()함수&lt;/code&gt;에 대해 정리보고 싶어 이번 포스팅을 작성하게 되었습니다.&lt;/p&gt;

&lt;p&gt;컴퓨터는 File이라는 단위를 사용해서 HardWare에 데이터를 저장하죠! 그래서, 파일에 쓰거나, 파일을 읽는 형태로 데이터를 입출력하게 되는데요! C언어에서는 대표적인 경우로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fopen()&lt;/code&gt;가 있습니다. 하지만, 오늘 알아볼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open()함수&lt;/code&gt;는 앞서 말했던 고수준 입출력 함수인 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fopen()&lt;/code&gt;과 달리 &lt;strong&gt;System Call&lt;/strong&gt;을 하는 저수준 입출력 함수입니다.&lt;/p&gt;

&lt;h2 id=&quot;open함수의-원형&quot;&gt;&lt;strong&gt;open()함수의 원형&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open()함수&lt;/code&gt;의 원형은 다음과 같습니다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;fcntl.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open()함수&lt;/code&gt;는 C POSIX 라이브러리중 하나인 fcntl.h 라이브러리를 include하면 사용할 수 있습니다. 그럼 한번 매개변수부터 하나씩 뜯어 볼까요??&lt;/p&gt;

&lt;h2 id=&quot;매개변수&quot;&gt;&lt;strong&gt;매개변수&lt;/strong&gt;&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;우선, 첫 번째 매개변수의 경우, 열거나 생성하고자 하는 파일의 경로의 문자배열을 명시해야 합니다.
    &lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./test.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDWR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;이런 방식으로 첫번째 매개변수에 &lt;em&gt;상대경로&lt;/em&gt; 또는 &lt;em&gt;절대경로&lt;/em&gt;를 명시해주면, 해당 경로에 있는 파일을 읽거나 쓰고, 생성하게 됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;두번쨰 매개변수의 경우, int값을 받는데 이것은 fopen함수에서 “r”, “w”와 같이 파일을 열 목적을 명시해 주어야 하죠.
    &lt;ul&gt;
      &lt;li&gt;이 목적의 경우, 여러가지 옵션을 사용할 수 있는데, 다음과 같습니다.
        &lt;ul&gt;
          &lt;li&gt;&lt;strong&gt;O_RDONLY&lt;/strong&gt; : 읽기 모드 (Read Only)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;O_WRONLY&lt;/strong&gt; : 쓰기 모드 (Write Only)&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;O_RDWR&lt;/strong&gt; : 읽기/쓰기 모드&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;O_CREAT&lt;/strong&gt; : 파일 생성&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;O_APPEND&lt;/strong&gt; : 파일을 쓰되 기존 파일의 맨 끝부터 이어 쓰는 기능&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;O_TRUNC&lt;/strong&gt; : 파일을 초기화&lt;/li&gt;
          &lt;li&gt;&lt;strong&gt;O_EXCL&lt;/strong&gt; : O_CREAT 와 함께 사용되며, 이미 파일이 존재한다면 에러를 리턴&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그런데, open()함수의 원형을 보면, 인자가 2개인 경우가 있도 있고, 3개인 경우도 있습니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;이는, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O_CREAT옵션&lt;/code&gt; flag와 관련이 있는데요! 일반적으로 LINUX운영 체제에서 파일이나 디렉토리를 생성하면, 파일 소유자, 그룹, others의 권한이 설정이 되어있는데, &lt;strong&gt;권한&lt;/strong&gt;이라는 것은 운영체제 입장에서 매우 중요하기 때문에 반드시 설정 해주어야 하죠!&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;그래서 파일을 생성하는 경우에는, 00777(-rwxrwxrwx)와 같이 Octal modes나 인자 옵션을 사용해 명시해주어야 합니다.&lt;/li&gt;
      &lt;li&gt;인자 옵션
        &lt;ul&gt;
          &lt;li&gt;S_IRWXU        파일 소유주에게 읽기, 쓰기, 실행 권한을 설정.&lt;/li&gt;
          &lt;li&gt;S_IRUSR        파일 소유주에게 읽기 권한을 설정.&lt;/li&gt;
          &lt;li&gt;S_IWUSR        파일 소유주에게 쓰기 권한을 설정.&lt;/li&gt;
          &lt;li&gt;S_IXUSR        파일 소유주에게 실행 권을을 설정.&lt;/li&gt;
          &lt;li&gt;S_IRWXG        파일 그룹에게 읽기, 쓰기, 실행 권한을 설정.&lt;/li&gt;
          &lt;li&gt;S_IRGRP        파일 그룹에게 읽기 권한을 설정.&lt;/li&gt;
          &lt;li&gt;S_IWGRP        파일 그룹에게 쓰기 권한을 설정.&lt;/li&gt;
          &lt;li&gt;S_IXGRP        파일 그룹에게 실행 권한을 설정.&lt;/li&gt;
          &lt;li&gt;S_IRWXO        다른 사용자에게 읽기, 쓰기, 실행 권한을 설정.&lt;/li&gt;
          &lt;li&gt;S_ROTH        다른 사용자에게 읽기 권한을 설정.&lt;/li&gt;
          &lt;li&gt;S_WOTH        다른 사용자에게 쓰기 권한을 설정.&lt;/li&gt;
          &lt;li&gt;S_XOTH        다른 사용자에게 실행 권한을 설정&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;반환값&quot;&gt;&lt;strong&gt;반환값&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;open()함수&lt;/code&gt;는 결과적으로 프로세스의 열려있는 file의 inode값을 가리키는 fd값을 반환하게 됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기본적으로 Shell은 항상 열려있는 파일이 3가지 있는데요.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;바로 &lt;strong&gt;stdin, stdout, stderr&lt;/strong&gt;입니다. 이에 대한 fd값은 각각, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0, 1, 2&lt;/code&gt;이구요!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;만약 이 3가지 파일 이외에, 사용자가 새로 파일을 열 경우, fd값은 3부터 배정되게 됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래의 코드를 보시면 각각의 반환되는 fd값을 통해 표준 입출력,에러를 제외한 숫자부터 반환이 되는 것을 볼수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fd1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./test1.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_CREAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fd2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./test2.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_CREAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fd3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./test3.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_CREAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;00700&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 fd값을 이용해서 우리는 write든 read든 fd값이 가리키고 있는 inode에 해당하는 파일에 대한 입출력을 할 수 있게 됩니다.&lt;/p&gt;

&lt;p&gt;fd에 대해 더 궁금한게 있으신 분들은 이 블로그의 링크를 참조하시면 좋을거 같습니다!&lt;/p&gt;

&lt;p&gt;fd 관련 아티클 : &lt;a href=&quot;http://webs.co.kr/index.php?mid=linux_1&amp;amp;document_srl=3319992#:~:text=유닉스&quot;&gt;http://webs.co.kr/index.php?mid=linux_1&amp;amp;document_srl=3319992#:~:text=유닉스&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;사용사례&quot;&gt;&lt;strong&gt;사용사례&lt;/strong&gt;&lt;/h2&gt;
&lt;hr /&gt;
&lt;p&gt;마지막으로, open()함수를 사용해서 간단한 파일 작성으로 글을 마무리 하겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;openfunc.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_CREAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0777&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;openfunc.txt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDWR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/GangminRYOU/GangminRYOU.github.io.git/assets/built/images/open_RDWR.png&quot; alt=&quot;반환값&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 open()함수를 사용해서 파일을 생성하고, 다시 파일을 읽기, 쓰기 모드로 열어 값을 입력했습니다.&lt;/p&gt;

&lt;p&gt;다른 옵션을 보면, 알수 있듯이 O_CREAT옵션의 경우 파일을 생성하는 목적으로 open함수를 사용했기 때문에, READ나 WRITE와 같은 다른 목적을 위해서 파일에 접근할 때는 O_RDWR등의 읽기, 쓰기 목적의 flag를 함수에 줬을 때 가능합니다.&lt;/p&gt;

&lt;p&gt;다음 포스팅은 저수준 파일 입출력 함수인 Read()와 write()함수로 돌아오겠습니다!&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>GangminRYOU</name>
        
        
      </author>

      

      
        <category term="c" />
      

      
        <summary type="html">C언어 파일입출력 저수준 입출력 함수 - open() 고수준 입출력과 저수준 입출력의 차이</summary>
      

      
      
    </entry>
  
</feed>
